use ff::Field;
use num_traits::identities::Zero;
use super::{Fq, Fq2, Fq12, Fq6, FqRepr};
use num_bigint::BigUint;


// power = (|Fq12| - 1)/3
const FQ12_MULT_ORDER_DIV_3 : [u64; 48] = [
    16953508628923568224, 13877003111090065395, 13157049836381475239, 11415053979013103756, 8384535856576305654, 16858761491289863955, 5606204346564449596, 
    11477821246166416167, 12793023930672435534, 6172907199131808173, 6931315615918879492, 2145656818538089052, 4588009837644227054, 14863053780587399191, 
    12417100097682464471, 6028805810388919583, 1386536852145720983, 9857992206758174354, 10109427491521724439, 7101431254775646169, 12194607637311870232, 
    4123599041920339461, 4361107823611899910, 17615083610772831412, 10982264379420315624, 6419188508526177463, 7498391412603358138, 12991551331951386245, 
    11052497498275195037, 11785136137640826697, 636005296143811820, 13105056392368402529, 3966494654182370702, 17822188952467346335, 17127093937586648918, 
    6576355335316381401, 16739546170660304941, 11212174993167722634, 1865707425941064056, 1346562786881031727, 12688767027439644562, 1866376690783873247, 
    16955186452462703345, 14122185803590355033, 15354689103052496694, 7224017006226930792, 8327800425992802905, 12799192649
];

const FQ12_MULT_ORDER : [u64; 48] = [
    13967037739351601440, 4737521185851092955, 2577661361725322487, 15798417863329759654, 6706863496019365347, 13682796326450488634, 16818613039693348790, 
    15986719664789696885, 1485583644598203371, 71977523685872905, 2347202774047086861, 6436970455614267157, 13764029512932681162, 7695673194343094341, 
    357812145628290183, 18086417431166758751, 4159610556437162949, 11127232546564971446, 11881538400855621702, 2857549690617386892, 18137078838226059081, 
    12370797125761018384, 13083323470835699730, 15951762684899391004, 14500049064551395258, 810821451868980774, 4048430164100522799, 2081165848435055504, 
    14710748421116033497, 16908664339212928476, 1908015888431435461, 2421681029686104355, 11899483962547112108, 16573078709982935773, 14487793665340843524, 
    1282321932239592589, 13325150364561811592, 15189780905793616288, 5597122277823192169, 4039688360643095181, 1172812934899830454, 5599130072351619743, 
    13972071209969006803, 5473069263351961869, 9170579161738386852, 3225306944971240762, 6536657204268857100, 38397577948
];

const FQ6_MULT_ORDER_DIV_27 : [u64; 24] = [
    8168956762542115120, 12803991695383604623, 16702320209049413708, 17652318445546162000, 16303848130085388482, 7056390770558977116, 7260638814434544408, 
    6439226801849030222, 17544709870344963018, 11956284243821547882, 5575926253511864029, 7595604974183140837, 11723832411009852653, 12634391244340473392, 
    7019961605730375294, 12764185526556718837, 16666459039236151248, 14472658015929537488, 8140829297918308879, 14928924455053179571, 905557763412333626, 
    10210676808216562665, 9677457426615697220, 31170804581356
];

const FQ6_MULT_ORDER : [u64; 24] = [
    17647647777832040464, 13666382448585395744, 8240787875304931350, 15443996187007583624, 15928785816985801871, 6055110067996865995, 11569807252637182866, 
    7838426986537851460, 12538564656575211095, 9225025330119415367, 2976056255143915872, 2167149492139734831, 2948825844203644170, 9087170270420852513, 
    5071522617624616796, 12591615890259479521, 7272536290346844930, 3380140882196928264, 16888206232989271978, 15699334738535264492, 6003315538423456307, 
    17433856789913469332, 3036933486690102330, 841611723696626
];

const FQ12_CUBIC_NON_RESIDUE : Fq12 = Fq12 { 
    c0: Fq6 { 
        c0: Fq2 { 
            c0: Fq(FqRepr([10142183612076115840, 10336180170933656228, 470517678848978077, 1225265646762263217])), 
            c1: Fq(FqRepr([11348019713242347020, 2754915599916440970, 15254070011878377052, 582093106373754232])), 
        }, 
        c1: Fq2 { 
            c0: Fq(FqRepr([397496596320767129, 15618912924840201202, 4512184083626728156, 117261539653304508])),
            c1: Fq(FqRepr([10874872625388672849, 8697447527460198735, 17201932474568901787, 3239181218336645708])),  
        }, 
        c2: Fq2 { 
            c0: Fq(FqRepr([3319746353403080977, 12107531098513439570, 7977768322294476906, 2777360315899794408])),
            c1: Fq(FqRepr([4282545994011025486, 13446103940465242757, 621706771151745465, 121235365032730123])),
        }
    }, 
    c1: Fq6 { 
        c0: Fq2 { 
            c0: Fq(FqRepr([10835993777695610176, 7471612555186838325, 5669943730362164093, 1589478061029939273])),
            c1: Fq(FqRepr([13798745335319118500, 9933747591465430734, 17986311991554267884, 2884267725610847413])), 
        }, 
        c1: Fq2 { 
            c0: Fq(FqRepr([9010191163654582374, 16916065212229622062, 13444508417525226022, 3305365841183382359])),
            c1: Fq(FqRepr([16399630071410982746, 11060057513443281354, 11904104725095752194, 2793879429500272640])),
        }, 
        c2: Fq2 { 
            c0: Fq(FqRepr([12230496698620887775, 2879834267624199743, 1836535646417438336, 2949238563047019140])),
            c1: Fq(FqRepr([2887317464157129146, 9549941403471574669, 13305129467053585697, 2048982498456539113])),
        } 
    } 
};

const ROOT_27_OF_UNITY : Fq6 = Fq6 { 
    c0: Fq2 { 
        c0: Fq(FqRepr([0, 0, 0, 0])), 
        c1: Fq(FqRepr([0, 0, 0, 0])) 
    }, 
    c1: Fq2 { 
        c0: Fq(FqRepr([0, 0, 0, 0])), 
        c1: Fq(FqRepr([0, 0, 0, 0])) 
    }, 
    c2: Fq2 { 
        c0: Fq(FqRepr([194717170545481332, 10713050357451161581, 34962824991068036, 114905412056219140])),
        c1: Fq(FqRepr([4228108808443533428, 10892079493576126185, 17015400802854381179, 1820057530234360532])),
    } 
};

const R_PRIME : [u64; 44] = [
    11608900242075462817, 11957288855914354513, 3116787106681700788, 4056127484362567420, 8118514525076557193, 69240188769302606, 9133271292293368251, 
    2039292154691536571, 14287587744049093151, 3554310640973855491, 12261137717040107045, 2251832533098411731, 7336272344092593252, 14765170906362374105, 
    15300949932261141727, 14106183133602261101, 12737401427063335353, 171177352230438000, 13049041856653590179, 18305798765839010998, 16104228988624323963, 
    1739542763929064922, 5601136942292264253, 15574900073644834590, 18274434499964322805, 17916135654498903305, 18322269162143131602, 4007644745573738693, 
    13947846285796705775, 16368008805899974858, 472327754523454952, 5885354980194466143, 2546607790591198545, 2891428736624824818, 17184353915837753597, 
    14744553112369412456, 9373784872161472250, 16200138677860926851, 11959944834529249218, 9547417553780286347, 5489829204756096954, 17399753614172681083, 
    8755379657557813582, 182295210734
];

const M_PRIME : [u64; 48] = [
    10887798433163368087, 6442620111203252320, 5925498864076479409, 16024781233117228933, 12017805302040997602, 16791140354641337449, 12674593397576570157, 
    7215868095803522290, 15636602336049209438, 16730884744177924545, 18268533137212137744, 15527882843810836270, 7081124931869209512, 9516729772367226167, 
    10183752447065015983, 15502457473202806646, 13085989172809235752, 108420017516737598, 1284723564304771983, 8061989650089060148, 7954858051136240117, 
    17888755599543366389, 11649540998901049035, 5945514820183971169, 11922621809996018633, 1933202901127852564, 7078564943103599682, 7718100670145644596, 
    1364989304968683823, 15395144788315683924, 4577511551603766591, 3201951561493279966, 4700210007183877234, 14860867369575060718, 18421873388246629180, 
    6029614175412069092, 2152860897591860129, 10387654856425849196, 15895727615005279996, 14248830315588959169, 1132513893817127473, 1035096278108215019, 
    9772924880967139577, 11715034521440154224, 436422959846410301, 9762853756639923596, 6159059254438582067, 11919040216
];

// write |Fq12| - 1 = 3^t * s, where s is not divisible by t; then TONELLI_SHANKS_EXP = (s + 1) / 3
const TONELLI_SHANKS_EXP: [u64; 48] = [
    8143247905175134667, 1880388565129969208, 14834765754973409599, 5205268981295554261, 15341218721414312637, 9506164238870890183, 10455828350081767549, 
    16822210333896135368, 473815701136016130, 7060753627267678679, 14604183006067387534, 13060510897000724805, 7685266468461084993, 5332972677650157796, 
    7975232774388427120, 6372203795324995708, 17131671803514241162, 1731536309413973243, 16088316340253385615, 13244058098342856550, 12749481517188288863, 
    4252002351265838857, 3577586229339246592, 5434899708397766397, 15437430888927053747, 8436300644186696179, 15991611300293446122, 14828636180735258154, 
    11340755654726963736, 10684677675677188923, 17103874338477133415, 1851797945918055768, 16544013052711541092, 18423612402552432901, 2683975042915381620, 
    6392483407359346146, 16333876291332592300, 9980244149077831305, 16466206118332233438, 5515574643576201653, 9351719999469030206, 5534827010387418006, 
    2677608099021902155, 7355171353358735970, 15599372545357875268, 7099683620123053590, 3724500770168168925, 474044172
];

const LAMBDA : [u64; 12] = [
    6338883757087263829, 18082362518251613329, 12769575203635315010, 16977236642651234352, 8686951213117475924, 13764436133107921006, 12359884445821460169, 
    15944377745085967733, 13997781615140285916, 7499777415441582065, 3683594101071511471, 124599342199167405
];


#[test]
fn check_cubic_non_residue() {
    // logic is the following: if b = a^3, then b^power = a^(|Fq12| - 1) = 1
    // so we just assemble ranodm element and assumr it's pow is not equal to one
    let elem: Fq12 = FQ12_CUBIC_NON_RESIDUE;
    assert_eq!(elem.pow(&FQ12_MULT_ORDER), Fq12::one());
    
    let pow = elem.pow(&FQ12_MULT_ORDER_DIV_3);
    assert_ne!(pow, Fq12::one()); 
}


#[test]
fn check_root_27_of_unity() {
    // the idea is to start with random element of Fp6, and raise it to pow = (|Fp6| - 1)/27
    // let the new elemetn to be a, it's order is 1, 3, 9 or 27, so we check that a^9 != 1 and assert that a^27 == 1
    let candidate_root_of_unity = ROOT_27_OF_UNITY;
    assert_eq!(candidate_root_of_unity.pow(&[27]), Fq6::one());
    assert_ne!(candidate_root_of_unity.pow(&[9]), Fq6::one());
}


struct Certificate {
    c: Fq12,
    root_27_of_unity_power: usize
}


fn cube_elem(elem: &Fq12) -> Fq12 {
    let mut res = elem.clone();
    res.square();
    res.mul_assign(elem);

    res
}


// given element a of order 3^t find t by succesive cubing
fn get_cubic_ord(mut a: Fq12) -> BigUint {
    let mut result = BigUint::ZERO;
    while a != Fq12::one() {
        a = cube_elem(&a);
        result += 1u64;
    }

    result
}


fn construct_setificate(miller_loop_f: Fq12) -> Certificate {
    // Input: Output of a Miller loop f and fixed 27-th root of unity w
    // Output: (c, w^i), such that c^λ = f · w^i
    // 1) for i in 0, 1, 2, find the only i, such that (f * w^i)^power == 1
    let mut correct_w_power = 3;
    let mut f = miller_loop_f;

    for i in 0..3 {
        if f.pow(FQ12_MULT_ORDER_DIV_3) == Fq12::one() {
            correct_w_power = i;
            break;
        } else {
            f.c0.mul_assign(&ROOT_27_OF_UNITY);
            f.c1.mul_assign(&ROOT_27_OF_UNITY); 
        }
    }
    assert!(correct_w_power < 3);

    // c = f^r_prime
    let mut c = f.pow(&R_PRIME);
    
    // c = c^m_prime
    c = c.pow(&M_PRIME);
    
    let c_inv = c.inverse().unwrap();
    let cubic_non_residue_pow = FQ12_CUBIC_NON_RESIDUE.pow(&TONELLI_SHANKS_EXP);

    // extract cubic root of c by using modified Tonelli-Shanks
    let mut x = c.pow(&TONELLI_SHANKS_EXP);
    
    // compute a = x^3 / c
    let mut a = cube_elem(&x);
    a.mul_assign(&c_inv);
    let mut t : BigUint = get_cubic_ord(a);

    while !t.is_zero() {
        x.mul_assign(&cubic_non_residue_pow);
        
        let mut a = cube_elem(&x);
        a.mul_assign(&c_inv);
        t = get_cubic_ord(a);
    }

    let ceritificate = Certificate {
        c: x,
        root_27_of_unity_power: correct_w_power
    };

    // self-check: c^λ = f · w^i
    let lhs = ceritificate.c.pow(&LAMBDA);
    let w = ROOT_27_OF_UNITY.pow(&[ceritificate.root_27_of_unity_power as u64]);
    let mut rhs = miller_loop_f.clone();
    rhs.c0.mul_assign(&w);
    rhs.c1.mul_assign(&w);

    assert_eq!(lhs, rhs);
    ceritificate
}


#[test]
fn test_certificate_construction() {
    let miller_loop_result = Fq12::zero();
    let ceritificate = construct_setificate(miller_loop_result);
    println!("c: {}, i: {}", ceritificate.c, ceritificate.root_27_of_unity_power);
}







